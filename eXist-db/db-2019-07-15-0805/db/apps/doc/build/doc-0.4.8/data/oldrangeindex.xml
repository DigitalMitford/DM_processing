<?xml version="1.0" encoding="UTF-8"?>
<book>
    <bookinfo>
        <productname>eXist-db â€“ Open Source Native XML Database</productname>
        <title>Legacy Range index</title>
        <date>November 2009</date>
        <orgname>The eXist-db Project</orgname>
    </bookinfo>
    <chapter>
        <title>Legacy Range index</title>
        <section>
            <title>Note</title>
            <note>
                <para>This index has been replaced by a redesigned range index module in eXist 2.2. The old
                index is still available and fully functional though.</para>
            </note>
            <para>Range indexes provide a shortcut for the database to directly select nodes
                based on their typed values. They are used when matching or comparing nodes by
                way of standard XPath operators and functions. Without a range index, comparison
                operators like =, &gt; or &lt; will default to a "brute-force" inspection of the
                DOM, which can be extremly slow if eXist-db has to search through maybe millions of
                nodes: each node has to be loaded and cast to the target type.</para>
            <para>To see how range indexes work, consider the following fragment:</para>
            <example>
                <title>Example: List Entry</title>
                <programlisting>
                    <markup>&lt;items&gt;
    &lt;item n="1"&gt;
       &lt;name&gt;Tall Bookcase&lt;/name&gt;
       &lt;price&gt;299.99&lt;/price&gt;
    &lt;/item&gt;
    &lt;item n="2"&gt;
       &lt;name&gt;Low Bookcase&lt;/name&gt;
       &lt;price&gt;199.99&lt;/price&gt;
    &lt;/item&gt;
&lt;/items&gt;</markup>
                </programlisting>
            </example>
            <para>With this short inventory, the text nodes of the <sgmltag>price</sgmltag>
                elements have dollar values expressed as a floating-point number, (e.g.
                "299.99"), which has an <ulink url="http://www.w3.org/TR/xmlschema-0/">XML
                    Schema Definition</ulink> (XSD) data type of <command>xs:double</command>.
                Using this builtin type to define a range index, we can improve the efficiency
                of searches for <sgmltag>price</sgmltag> values. (Instructions on how to
                configure range indexes using configuration files are provided under the <ulink url="#idxconf">Configuring Indexes</ulink> section below.) During indexing,
                eXist-db will apply this data type selection by attempting to cast all
                <sgmltag>price</sgmltag> values as double floating point numbers, and add
                appropriate values to the index. Values that cannot be cast as double floating
                point numbers are therefore ignored. This range index will then be used by any
                expression that compares <sgmltag>price</sgmltag> to an <command>xs:double</command> value - for instance:</para>
            <synopsis>//item[price &gt; 100.0]</synopsis>
            <para>For non-string data types, the range index provides the query engine with a more
                efficient method of data conversion. Instead of retrieving the value of each
                selected element and casting it as a <command>xs:double</command> type, the
                engine can evaluate the expression by using the range index as a form of lookup
                index. Without an index, eXist-db has to do a full scan over all price
                <sgmltag>price</sgmltag> elements, retrieve the string values of their text
                node and cast them to a double number. This is a time-consuming process which
                also scales very badly with growing data sets. With a proper index, eXist-db needs
                just a single index lookup to evaluate <command>price = 100.0</command>. The
                range expression <command>price &gt; 100.0</command> is processed with an index
                scan starting at 100. </para>
            <para>For string data, the index will also be used by the standard functions
                <function>fn:contains()</function>, <function>fn:starts-with()</function>,
                <function>fn:ends-with()</function> and <function>fn:matches()</function>.</para>
            <para>To illustrate this functionality, let's return to the previous example. If you
                define a range index of type <command>xs:string</command> for element
                <sgmltag>name</sgmltag>, a query on this element to select tall bookcases
                using <function>fn:matches()</function> will be supported by the following
                index:</para>
            <synopsis>//item[fn:matches(name, '[Tt]all\s[Bb]')]</synopsis>
            <para>Note that <function>fn:matches</function> will by default try to match the
                regular expression <emphasis>anywhere</emphasis> in the string. We can thus
                speed up the query dramatically by using "^" to restrict the match to the start
                of the string: </para>
            <synopsis>//item[fn:matches(name, '^[Tt]all\s[Bb]')]</synopsis>
            <para>Also, if you really need to search for an exact substring in a longer text
                sequence, it is often better to use the NGram index instead of the range index,
                i.e. use <function>ngram:contains()</function> instead of <function>fn:contains()</function>. Unfortunately, there's no equivalent NGram
                function for <function>fn:matches()</function> yet, but we may add one in the
                future as it could help to increase performance dramatically.</para>
            <para>In general, three conditions must be met in order to optimize a search using a
                range index:</para>
            <orderedlist>
                <listitem>
                    <para>
                        <emphasis>The range index must be defined on <emphasis>all</emphasis>
                            items in the input sequence.</emphasis>
                    </para>
                    <para>For example, suppose you have two collections in the database: C1 and
                        C2. If you have a range index defined for collection C1, but your query
                        happens to operate on both C1 and C2, then the range index would
                        <emphasis>not</emphasis> be used. The query optimizer selects an
                        optimization strategy based on the entire input sequence of the query.
                        Since, in this example, since only nodes in C1 have a range index, no
                        range index optimization would be applied.</para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>The index data type (first argument type) must match the test
                            data type (second argument type).</emphasis>
                    </para>
                    <para>In other words, with range indexes, there is no promotion of data
                        types (i.e. no data type precedes or replaces another data type). For
                        example, if you defined an index of type <command>xs:double</command> on
                        <sgmltag>price</sgmltag>, a query that compares this element's value
                        with a string literal would not use a range index, for instance:</para>
                    <synopsis>//item[price = '1000.0']</synopsis>
                    <para>In order to apply the range index, you would need to cast the value as
                        a type <command>xs:double</command>, i.e.:</para>
                    <synopsis>//item[price = xs:double($price)] (where $price is any test value)</synopsis>
                    <para>Similarly, when we compare <command>xs:double</command> values with
                        <command>xs:integer</command> values, as in, for instance:</para>
                    <synopsis>//item[price = 1000]</synopsis>
                    <para>the range index would again not be used since the
                        <sgmltag>price</sgmltag> data type differs from the test value type,
                        although this conflict might not seem as obvious as it is with string
                        values.</para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>The right-hand argument has no dependencies on the current
                            context item.</emphasis>
                    </para>
                    <para>That is, the test or conditional value must not depend on the value
                        against which it is being tested. For example, range indexes will not be
                        applied given the following expression:</para>
                    <synopsis>//item[price = self]</synopsis>
                </listitem>
            </orderedlist>
            <para>Concerning range indexes on strings there's another restriction to be
                considered: up to version 1.3, range indexes on strings can only be used with
                the default Unicode collation. Also, string indexes will always be case
                sensitive (while n-gram and full text indexes are not). It is not yet possible
                to define a string index on a different collation (e.g. for German or French) or
                to make it case insensitve. This is a limitation we plan to address in the future.</para>
        </section>
        <section>
            <title>Range index configuration</title>
            <example>
                <title>Range Index Configuration</title>
                <programlisting>
                    <markup>&lt;!-- Range indexes --&gt;
&lt;create qname="title" type="xs:string"/&gt;
&lt;create qname="author" type="xs:string"/&gt;
&lt;create qname="year" type="xs:integer"/&gt;
&lt;!-- "old" context-dependant configuration using the path attribute: --&gt;
&lt;create path="//booktitle" type="xs:string"/&gt;</markup>
                </programlisting>
            </example>
            <para>A range index is configured by adding a <sgmltag>create</sgmltag> element
                directly below the root <sgmltag>index</sgmltag> element. As explained above,
                the node to be indexed is either specified through a <option>path</option>
                or a <option>qname</option> attribute.</para>
            <note>
                <para>Unlike the new range index, the <sgmltag>create</sgmltag> elements of
                the old range index are NOT wrapped inside a <sgmltag>range</sgmltag> tag.</para>
            </note>
            <para>As range indexes are type specific, the <option>type</option> attribute is
                always required. The type should be one of the atomic XML schema types,
                currently including <command>xs:string</command>, <command>xs:integer</command> and its derived types <command>xs:double</command> and <command>xs:float</command>, <command>xs:boolean</command> and <command>xs:dateTime</command>. Further types
                may be added in the future. If the name of the type is unknown, the index
                configuration will be ignored and you will get a warning written into the
                logs.</para>
            <para>Please note that the index configuration will only apply to the node
                specified via the <option>path</option> or <option>qname</option> attribute,
                not to descendants of that node. Consider a mixed content element
                like:</para>
            <example>
                <title>Mixed Content Element</title>
                <programlisting>
                    <markup>&lt;mixed&gt;&lt;s&gt;un&lt;/s&gt;&lt;s&gt;even&lt;/s&gt;&lt;/mixed&gt;</markup>
                </programlisting>
            </example>
            <para>If an index is defined on <sgmltag>mixed</sgmltag>, the key for the index
                is built from the concatenated text nodes of element
                <sgmltag>mixed</sgmltag> and all its descendants, i.e. "uneven". The
                created index will only be used to evaluate queries on
                <sgmltag>mixed</sgmltag>, but not for queries on <sgmltag>s</sgmltag>.
                However, you can create an additional index on <sgmltag>s</sgmltag> without
                getting into conflict with the existing index on
                <sgmltag>mixed</sgmltag>.</para>
        </section>
        <section id="pathvsqname">
            <title>Configuration by path vs. configuration by qname</title>
            <para>It is important to note the difference between the <option>path</option>
                and <option>qname</option> attributes used throughout above example. Both
                attributes are used to define the elements or attributes to which the index
                should be applied. However, the <option>path</option> attribute creates
                <emphasis>context-dependant</emphasis> indexes, while the
                <option>qname</option> attribute does not. The path attribute takes a
                simple path expression: </para>
            <synopsis>&lt;create path="//book/title" type="xs:string"/&gt;</synopsis>
            <para>The path expression looks like XPath, but it's really not. Index path
                syntax uses the following components to construct paths:</para>
            <itemizedlist>
                <listitem>
                    <para>Elements are specified by their <emphasis>qname</emphasis>
                    </para>
                </listitem>
                <listitem>
                    <para>Attributes are specified by <option>@attributeName</option>, so if
                        the attribute is called "attrib1", one uses
                        <option>@attrib1</option> in the index specification.</para>
                </listitem>
                <listitem>
                    <para>Child nodes are selected using the forward-slash
                        (<option>/</option>)</para>
                </listitem>
                <listitem>
                    <para>All descendant nodes in a tree are selected using the double
                        forward-slash (<option>//</option>)</para>
                </listitem>
            </itemizedlist>
            <para>The example above creates a range index of type string on all
                <sgmltag>title</sgmltag> elements which are children of
                <sgmltag>book</sgmltag> elements, which may occur at an arbitrary
                position in the document tree. All other <sgmltag>title</sgmltag> elements,
                e.g. those being children of <sgmltag>section</sgmltag> nodes, are not
                indexed. The path expression thus defines a <emphasis>selective</emphasis>
                index, which is also <emphasis>context-dependant</emphasis>: we always need
                look at the context of each <sgmltag>title</sgmltag> node before we can
                determine if this particular title is to be indexed or not.</para>
            <para>This kind of context-dependant index definition helps to keep the index
                small, but unfortunately it makes it hard for the query optimizer to
                properly rewrite the expression tree without missing some nodes. The
                optimizer needs to make an optimization decision at compile time, where the
                context of an expression is unknown or at least not exactly known (read the
                <ulink url="http://atomic.exist-db.org/blogs/eXist/NewIndexing">blog
                    article</ulink> to get the whole picture). This means that some of the
                highly efficient optimization techniques can not be applied to
                context-dependant indexes!</para>
            <para>We thus had to introduce an alternative configuration method which is not
                context-dependant. To keep things simple, we decided to define the index on
                the <emphasis>qname</emphasis> of the element or attribute alone and to
                ignore the context altogether:</para>
            <synopsis>&lt;create qname="title" type="xs:string"/&gt;</synopsis>
            <para>This results in an index being created on every <sgmltag>title</sgmltag>
                element found in the document node tree. Section titles will be indexed as
                well as chapter or book titles. Indexes on attributes are defined as above
                by prepending "@" to the attribute's name, e.g.:</para>
            <synopsis>&lt;create qname="@type" type="xs:string"/&gt;</synopsis>
            <para>defines an index on all attributes named "type", but not on elements with
                the same name.</para>
            <para>Defining indexes on qnames may result in a considerably larger index, but
                it also allows the query engine to apply all available optimization
                techniques, which can improve query times by an order of magnitude. As so
                often, there's a trade-off between performance and storage space. In many
                cases, the performance win can be dramatic enough to justify an increase in
                index size.</para>
            <important>
                <para>To be on the safe side and to benefit from current and future
                    improvements in the query engine, you should prefer
                    <option>qname</option> over <option>path</option> - unless you
                    really need to exclude certain nodes from indexing.</para>
            </important>
        </section>
    </chapter>
</book>