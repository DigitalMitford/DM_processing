xquery version "3.0";
declare default element namespace "http://www.tei-c.org/ns/1.0";
declare namespace local = "http://newtfire.org";

declare variable $mitford := collection ('/db/mitford');
declare variable $MissJames := $mitford//TEI//text//p//*[@ref="#James_Miss"];
declare variable $siteindexID := doc('/db/si.xml')//@xml:id;
declare function local:getRefsForCat($catNames as xs:string+, $refList as element()*, $label as xs:string) as element()
{element {$label}{
 $refList[local-name()=$catNames or @type=$catNames]  } 
}; 
declare function local:getTopThree($cats as element()+) as element()+ {
   let $count := count($cats/*)
   order by $count descending
    return $cats[position() lt 4]

};
declare function local:getTopThreeRefs($catResults as element()+, $treeMatches as element()+, $label as xs:string) as element()+
{element {$label}
{for $catResult in $catResults
let $names := distinct-values(($catResult//@ref, $catResult//@corresp))
order by count($catResult//*) descending
return 
    <popCat>{$catResult/name()}
      
     {let $allofThem :=
         for $name in $names
 let $nameMatch := $catResult//*[@* = $name]
 let $countMatch := count($nameMatch)
 (:let $reportName := 
    if ($siteindexID[. = substring-after($name, '#')]) then
     $siteindexID[. = substring-after($name, '#')]/parent::*/*[1]
     '<note>'{$siteindexID[. = substring-after($name, '#')]/parent::*//note/string()}'</note>'
     else $name/parent::*:)
 order by $countMatch descending 

return
   <name count="{$countMatch}">
       {$siteindexID[. = substring-after($name, '#')]/parent::*/*[1]}
<altName>{string-join(distinct-values($nameMatch/string()), ', ')}</altName>
<note>{$siteindexID[. = substring-after($name, '#')]/parent::*//note/string()}</note>
    <URI>{let $treeURI := for $treeMatch in $treeMatches
where $name eq ($treeMatch/@ref | $treeMatch/@corresp)
return $treeMatch/tokenize(base-uri(), '/')[last()]
    
    return string-join(distinct-values($treeURI), ', ')
        
    }</URI>

   </name>
   for $item in $allofThem[position() lt 4]
   return $item
     }
    </popCat>
}
};
(:ebb: THANK YOU MARTIN HOLMES!!! Here's what I need to do next: Get the results of the topthreeCats. generate a new element to contain (with attributes) the following information: @ref, the count, and the base-uri()   :)
        let $MJcoCited := $MissJames/ancestor::p//*[@ref | @corresp] except $MissJames 
        let $MJcoCitURLs := $MJcoCited/tokenize(base-uri(), '/')[last()]
      
       let $MJPersons := local:getRefsForCat(('persName', 'person'), $MJcoCited, 'people')
       let $MJOrgs := local:getRefsForCat(('orgName', 'org'), $MJcoCited, 'organizations')
       let $MJPlaces := local:getRefsForCat(('placeName', 'place'), $MJcoCited, 'places')
      let $MJTitles := local:getRefsForCat(('bibl', 'title', 'art', 'fict', 'song'), $MJcoCited, 'works')
      let $MJLetters := local:getRefsForCat(('letter'), $MJcoCited, 'letters')
      let $MJEvents := local:getRefsForCat(('event'), $MJcoCited, 'events')
      let $MJPlants := local:getRefsForCat(('plant'), $MJcoCited, 'plants')
      
      let $topThree := local:getTopThree(($MJPersons, $MJOrgs, $MJPlaces, $MJTitles, $MJLetters, $MJEvents, $MJPlants))
  
     let $topThreeRefs := local:getTopThreeRefs($topThree, $MJcoCited, 'mostPop')
     return $topThreeRefs
    
    
    
    