<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="file:/Applications/oxygen/frameworks/docbook/css/docbook.css"?><book><bookinfo><productname>eXist-db â€“ Open Source Native XML Database</productname><title>New Range Index</title><date>November 2009</date><orgname>The eXist-db Project</orgname></bookinfo><chapter><title>New Range Index (since eXist 2.2)</title><section id="newrangeidx"><title>Overview</title><para>eXist version 2.2 and above includes a rewritten, modularized range index. Under
                the hood it is based on Apache Lucene for super fast lookups. It also provides new
                optimizations to speed up some types of queries which failed to run efficiently with
                the old index.</para><para>Range indexes are extremely important in eXist-db. Without a proper index,
                evaluating a general comparison in a filter (like <code>//foo[baz = "xyz"]</code>)
                requires eXist to do a full scan over the context node set, checking the value of
                every node against the argument. This is not only slow, it also limits concurrency
                due to necessary locking and consumes memory for loading each of the nodes. With a
                well-defined index, queries will usually complete in a few milliseconds instead of
                taking seconds. The index allows the optimizer to rewrite the expression and process
                the index lookup in advance, assuming that the number of baz elements with content
                "xyz" is much smaller than the total number of elements.</para><para>The old range indexing code had three main issues though:</para><orderedlist><listitem><para>
            Index entries were organized by collection, resulting in an unfortunate dependency between collection 
            size and update speed. In simple words: updating or removing documents became slower as the collection grew. 
            For a long time, the general recommendation was to split large document sets into multiple, smaller sub-collections 
            if update speed was an issue. 
            </para></listitem><listitem><para>
            Queries on very frequent search strings were quite inefficient: for example, a query 
            <synopsis language="xquery">//term[@type ="main"][. = "xyz"] </synopsis>
            could be quite slow despite an index being defined if @type="main" occurred very 
             often. Unfortunately this is a common use of attributes and to make it quick, you had to reformulate 
            the query, e.g. by moving the non-selective step to the back: 
            <synopsis language="xquery">//term[. = "xyz"][@type = "main"]</synopsis></para></listitem><listitem><para>
            Range indexes were baked into the core of eXist-db, making maintenance and bug fixing difficult.
            </para></listitem></orderedlist><para>The rewritten range index addresses both issues. First, indexes are now organized
                by document/node, so collection size does no longer matter when updating an index
                entry. Concerning storage, the index is entirely based on Apache Lucene instead of
                the B+-tree which was previously used. Most range indexes tend to be strings, so why
                not leave the indexing to a technology like Lucene, which is known to scale well and
                does a highly efficient job on string processing? Since version 4, Lucene has added
                support for storing numeric data types and binary data into the index, so it seemed
                to be a perfect match for our requirements. Lucene is integrated into eXist on a
                rather low level with direct access to the indexes. </para><para>To address the second issue, it is now possible to combine several fields to index
                into one index definition, so above XPath: </para><synopsis language="xquery">//term[@type = "main"] [. = "xyz"]</synopsis><para>can be evaluated with a single index lookup. We'll see in a minute how to define
                such an index. </para><para>Finally, the new range index is implemented as a pluggable module: a separate
                component which is not required for the core of eXist-db to work properly. For
                eXist, the index is a black box: it does not need to know what the index does. If
                the index is there, it will automatically plug itself into the indexing pipeline as
                well as the query engine. If it is not, eXist will fall back to default (brute
                force) query processing.</para></section><section><title>Index Configuration</title><para>We tried to keep the basic index configuration as much backwards compatible as
                possible. The old range index is still supported to allow existing applications to
                run unchanged.</para><example><title>Example: Index Configuration with the Legacy Range Index</title><programlisting language="xml">&lt;collection xmlns="http://exist-db.org/collection-config/1.0"&gt;
    &lt;!--from Tamboti--&gt;
    &lt;index xmlns:mods="http://www.loc.gov/mods/v3"&gt;
        &lt;lucene&gt;
            &lt;text qname="mods:title"/&gt;
        &lt;/lucene&gt;
        &lt;!-- Range indexes --&gt;
        &lt;create qname="mods:namePart" type="xs:string"/&gt;
        &lt;create qname="mods:dateIssued" type="xs:string"/&gt;
        &lt;create qname="@ID" type="xs:string"/&gt;
    &lt;/index&gt;
&lt;/collection&gt;</programlisting></example><para>To use the new range index, wrap the range index definitions into a range element:</para><example><title>Example: Index Configuration with the New Range Index</title><programlisting language="xml">&lt;collection xmlns="http://exist-db.org/collection-config/1.0"&gt;
    &lt;!--from Tamboti--&gt;
    &lt;index xmlns:mods="http://www.loc.gov/mods/v3"&gt;
        &lt;lucene&gt;
            &lt;text qname="mods:title"/&gt;
        &lt;/lucene&gt;
        &lt;!-- Range indexes --&gt;
        &lt;range&gt;
            &lt;create qname="mods:namePart" type="xs:string" case="no"/&gt;
            &lt;create qname="mods:dateIssued" type="xs:string"/&gt;
            &lt;create qname="@ID" type="xs:string"/&gt;
        &lt;/range&gt;
    &lt;/index&gt;
&lt;/collection&gt;</programlisting></example><para>If you store this definition and do a reindex, you should find new index files in
                the <filename>webapp/WEB-INF/data/range directory</filename> (or wherever you
                configured your data directory to be). </para><para>Just as the old range index, the new indexes will be used automatically for
                general or value comparisons as well as string functions like
                    <code>fn:contains</code>, <code>fn:starts-with</code>,
                <code>fn:ends-with</code>. </para><note><para><code>fn:matches</code> is currently not supported due to limitations in
                    Lucene's regular expression handling. If you require fn:matches a lot, consider
                    using the old range index.</para></note><para>Above configuration applies to documents using MODS, a standard for
                bibliographical metadata. To provide some examples, the following XPath expressions
                should use the created indexes: </para><example><title>Example: XPath expressions which should be optimized by the index</title><programlisting language="xquery">declare namespace mods="http://www.loc.gov/mods/v3";
//mods:mods[mods:name/mods:namePart = "Dennis Ritchie"],
//mods:mods[mods:originInfo/mods:dateIssued = "1978"],
//mods:mods[mods:name/mods:namePart = "Dennis Ritchie"]
    [mods:originInfo/mods:dateIssued = "1978"]</programlisting></example></section><section><title>New Configuration Features</title><section><title>Case sensitive index</title><para> Add <code>case="no"</code> to create a case insensitive index on a string.
                    This is a feature many users have asked for. With a case insensitive index on
                        <code>mods:namePart</code> a match will also be found if you query for
                    "dennis ritchie" instead of "Dennis Ritchie". </para></section><section><title>Collations</title><para>
        A collation changes how strings are compared. For example, you can change the strength property of the 
        collation to ignore diacritics, accents or case. So to compare strings ignoring accents or case, you can 
        define an index as follows:
    </para><example><title>Example: Configuring a collation</title><programlisting language="xml">&lt;create qname="mods:namePart" 
        type="xs:string" 
        collation="?lang=en-US&amp;amp;strength=primary"/&gt;</programlisting></example><para>
        Please refer to the <ulink url="http://userguide.icu-project.org/collation/concepts">ICU documentation </ulink> (which is used by eXist) 
        for more information on collations, strength etc.    
    </para></section><section><title>Combined indexes</title><para> If you know you will often use a certain
                    combination of filters, you can combine the corresponding indexes into one to
                    further reduce query times. For example, the <sgmltag>mods:name</sgmltag>
                    element has an attribute type which qualifies the name as being "personal",
                    "corporate" or another predefined value. To speed up a query
                    like</para><synopsis language="xquery">//mods:mods[mods:name[@type = "personal"] 
          [mods:namePart = "Dennis Ritchie"]</synopsis><para>you
                    could create a combined index on <sgmltag>mods:name</sgmltag> as follows:</para><example><title>Example: Configuring a combined index</title><programlisting language="xml">&lt;range&gt;
    &lt;create qname="mods:name"&gt;
        &lt;field name="name-type" match="@type" type="xs:string"/&gt;
        &lt;field name="name-part" match="mods:namePart" type="xs:string"/&gt;
    &lt;/create&gt;
&lt;/range&gt;</programlisting></example><para>This index will be used whenever the context of the filter
                    expression is a mods:name and it filters on either or both: @type and
                        <sgmltag>mods:namePart</sgmltag>. Advantage: only one index lookup is
                    required to evaluate such an expression, resulting in a huge performance boost,
                    in particular if the combination of filters does only match a few names out of a
                    large set!</para><para>Note that all 3 attributes of the field element are
                    required. The name you give to the field can be arbitrary, but it should be
                    unique within the index configuration document. The match attribute specifies
                    the nodes to include in the field. It should be a simple path relative to the
                    context element. </para><para> You can skip the match attribute if you want to
                    index the content of the context node itself. In this case, an additional
                    attribute:  <code>nested="yes|no"</code> can be added to tell the indexer to
                    skip the content of nested nodes to only index direct text children of the
                    context node.</para><para> The index is also used if you only query one of the
                    defined fields, e.g.:
                    <synopsis language="xquery">//mods:mods[mods:name[mods:namePart = "Dennis Ritchie"]]. </synopsis>
                    It is important that the filter expression matches the index definition though,
                    so the following will not be sped up by the index:
                    <synopsis language="xquery">//mods:mods[mods:name/mods:namePart = "Dennis Ritchie"] </synopsis>
                    because the context of the filter expression here is mods:mods, not mods:name.
                    </para><para>You can create as many combined indexes as you like, even if some
                    of them refer to elements which are nested inside other elements having a
                    different index. For example, to index a complete MODS record, we could create
                    one nested index on the root element: <sgmltag>mods:mods</sgmltag>, and include
                    all attributes or simple descendant elements we may want to query at the same
                    time. <sgmltag>mods:name</sgmltag> - even though a child of
                        <sgmltag>mods:mods</sgmltag> - is a complex element, so we want it to have a
                    separate index as shown above. We thus define both indexes: </para><example><title>Example: Complex index definition</title><programlisting language="xml">&lt;range&gt;
    &lt;create qname="mods:name"&gt;
        &lt;field name="name-type" match="@type" type="xs:string"/&gt;
        &lt;field name="name-part" match="mods:namePart" type="xs:string"/&gt;
    &lt;/create&gt;
    &lt;create qname="mods:mods"&gt;
        &lt;field name="mods-dateIssued" match="mods:originInfo/mods:dateIssued" type="xs:string"/&gt;
        &lt;field name="mods-id" match="@ID" type="xs:string"/&gt;
        &lt;field name="mods-authority" match="@authority" type="xs:string"/&gt;
        &lt;field name="mods-lang" match="@lang" type="xs:string"/&gt;
    &lt;/create&gt;
&lt;/range&gt;</programlisting></example><para> This allows a more complex query to be optimized: </para><example><title>Example: XPath optimized by the index</title><programlisting language="xquery">//mods:mods[mods:name[@type = "personal"]
           [mods:namePart = "Dennis Ritchie"]] 
           [mods:originInfo/mods:dateIssued = "1979"]</programlisting></example>In this case, the mods:dateIssued lookup will be done first, which
                presumably returns more hits than the name lookup. For maximum performance it may
                thus still be faster to split the expression into two parts and do the name check
                first.</section></section><section><title>Using Index Functions</title><para>Internally the query optimizer will rewrite range lookup expressions into
                optimized function calls into the <code>range</code> module (namespace
                    <code>http://exist-db.org/xquery/range</code>). This happens transparently and
                you'll never see the function calls. However, for debugging and testing it is
                sometimes useful to be able to use the corresponding functions directly. There are
                two sets of functions: one for simple range index lookups, and one for indexes on
                fields.</para><para>Given the following index configuration:</para><example><title>Some Indexes on Shakespeare</title><programlisting language="xml">&lt;range&gt;
    &lt;create qname="SPEAKER" type="xs:string"/&gt;
    &lt;create qname="SPEECH"&gt;
        &lt;field name="stagedir" type="xs:string" match="//STAGEDIR"/&gt;
        &lt;field name="line" type="xs:string" match="LINE" case="no"/&gt;
    &lt;/create&gt;
&lt;/range&gt;</programlisting></example><para>A query:</para><synopsis language="xquery">//SPEECH[SPEAKER="HAMLET"]</synopsis><para>translates into:</para><synopsis language="xquery">//SPEECH[range:eq(SPEAKER, "HAMLET")]</synopsis><para>If the index is defined on an element with fields, the entire sub-expression, i.e. the context path and all its filters,
                is rewritten into a single function call. For example, take:</para><synopsis language="xquery">collection("/db/apps/demo/data")//SPEECH[.//STAGEDIR = "Aside"]</synopsis><para>is replaced with</para><synopsis language="xquery">collection("/db/apps/demo/data")/range:field-eq("stagedir", "Aside")</synopsis><para>Because the index root is defined on <sgmltag>SPEECH</sgmltag>, the function will always return
            <sgmltag>SPEECH</sgmltag> elements.</para><para>If multiple filters are used and each of them has a corresponding field definition, they are combined into one call:</para><synopsis language="xquery">collection("/db/apps/demo/data")/range:field-eq(("stagedir", "line"), "Aside", "what do you read, my lord?")</synopsis><para>Note that while the field names are specified in a sequence, we add one parameter for every value to look up. This way it is possible
                to specify more than one value for each parameter by passing in a sequence.</para><para>Because different operators might be used inside the filters, the query engine will actually rewrite the expression to the
                following:</para><synopsis language="xquery">collection("/db/apps/demo/data")/range:field(("stagedir", "line"), ("eq", "eq"), "Aside", "what do you read, my lord?")</synopsis><para>This is not easy to read, but efficient, and users will normally not see this function call anyway. However, it sometimes helps to know what the
                optimizer is supposed to do and try it out explicitely.</para></section></chapter></book>